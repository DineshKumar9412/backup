API Rate limiter methods
Created by Thirumoorthi (Unlicensed)
Mar 01, 20223 min read
2 people viewed
Referense link : Ratelimit in Fastapi 
https://stackoverflow.com/questions/65491184/ratelimit-in-fastapi

2.API Throttling using Redis and FastAPI (Dockerized) 
https://sayanc20002.medium.com/api-throttling-using-redis-and-fastapi-dockerized-98a50f9495c

we have four methods

slowapi

FastAPILimiter

walrus

Redis

Slowapi :

Best option is using a library since FastAPI does not provide this functionality out-of-box.

Slowapi is great, and easy to use.

You can use ut like this.

Code :


from fastapi import FastAPI,Request,Response
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
import uvicorn
limiter = Limiter(key_func=get_remote_address)
app = FastAPI()
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

@app.post("/aimp")
@limiter.limit("1 per day ")
async def homepage(request: Request, response: Response):
    return {"result": "Welcome to aimp"}

if __name__ == "__main__":
    uvicorn.run("slowapi_method:app", debug=True, reload=True)
2.FastAPILimiter :


FastAPI doesn't natively support this, but it's possible with a few libraries such the ones below, but will usually require some sort of database backing(redis, memcached, etc), although slowapi has a memory fallback in case of no database.

Code :


import aioredis
import uvicorn
from fastapi import Depends, FastAPI

from fastapi_limiter import FastAPILimiter
from fastapi_limiter.depends import RateLimiter

app = FastAPI()


@app.on_event("startup")
async def startup():
    redis = await aioredis.create_redis_pool("redis://localhost")
    FastAPILimiter.init(redis)


@app.get("/", dependencies=[Depends(RateLimiter(times=2, seconds=5))])
async def index():
    return {"msg": "Hello World"}


if __name__ == "__main__":
    uvicorn.run("main:app", debug=True, reload=True)
 

3.walrus :

 

fastapi-limiter and slowapi is very beautiful package to implement Ratelimit in Fastapi.

but use walrus can also do it. but should start redis database.

start a redis.

python code: write a python file: walrus_test.py

code:

Code :


from walrus import Database, RateLimitException
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import uvicorn

db = Database()
rate = db.rate_limit('xxx', limit=5, per=60)  # in 60s just can only click 5 times

app = FastAPI()


@app.exception_handler(RateLimitException)
def parse_rate_litmit_exception(request: Request, exc: RateLimitException):
    msg = {'success': False, 'msg': f'please have a tea for sleep, your ip is: {request.client.host}.'}
    return JSONResponse(status_code=429, content=msg)


@app.get('/')
def index():
    return {'success': True}


@app.get('/important_api')
@rate.rate_limited(lambda request: request.client.host)
def query_important_data(request: Request):
    data = 'important data'
    return {'success': True, 'data': data}


if __name__ == "__main__":
    uvicorn.run("walrus_test:app", debug=True, reload=True)
4.Redis :

Redis is a super fast in-memory datastore structure, it follows NoSQl architecture meaning in consists of key-value pairs.

create a python code:redis_limit

Code :


import redis
client = redis.Redis(host="redis-server")
def limiter(key, limit):
    req = client.incr(key)
    if req == 1:
        client.expire(key, 60)
        ttl = 60    else:
        ttl = client.ttl(key)
    if req > limit:
        return {
            "call": False,            "ttl": ttl
        }
    else:
        return {
            "call": True,            "ttl": ttl
        }
then Api python code: api_redis.py

Code :


from fastapi import FastAPI, Request, HTTPException, status
from .redis import limiter
app = FastAPI()
@app.get("/")
def test(request: Request):
    clientIp = request.client.host
    res = limiter(clientIp, 5)
    if res["call"]:
        return {
            "message": "Hello world",            
            "ttl": res["ttl"]
        }
    else:
       raise      HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE,      detail={
       "message": "call limit reached",       
       "ttl": res["ttl"]
    })
